typedef struct item * pitem;
struct item {
    int prior, cnt;
    bool rev;
    ll value;
    ll sum;
    pitem l, r;
    item (ll value) : value(value), prior(rand()), l(NULL), r(NULL),sum(value) { }
    item (ll value, int prior) : value(value), prior(prior), l(NULL), r(NULL) { }
};
int cnt (pitem t) {
    return t ? t->cnt : 0;
}
void upd_cnt (pitem t) {
    if (t)
        t->cnt = 1 + cnt(t->l) + cnt (t->r);
}
void upd_sum (pitem t) {
    if (t) {
        ll lef = (t->l) ? t->l->sum : 0;
        ll rig = (t->r) ? t->r->sum : 0;
        t->sum = t->value + lef + rig;
    }
}
void push (pitem it) { 		// we use it as lazy propagation
    if (it && it->rev) {
        it->rev = false;
        swap (it->l, it->r);
        if (it->l)  it->l->rev ^= true;
        if (it->r)  it->r->rev ^= true;
    }
}
void merge (pitem & t, pitem l, pitem r) {
    push (l);
    push (r);
    if (!l || !r)
        t = l ? l : r;
    else if (l->prior > r->prior)
        merge (l->r, l->r, r),  t = l;
    else
        merge (r->l, l, r->l),  t = r;
    upd_cnt (t);
    upd_sum (t);
}
void split (pitem t, pitem & l, pitem & r, int key, int add = 0) {
    if (!t)
        return void( l = r = 0 );
    push (t);
    int cur_key = add + cnt(t->l);
    if (key <= cur_key)
        split (t->l, l, t->l, key, add),  r = t;
    else
        split (t->r, t->r, r, key, add + 1 + cnt(t->l)),  l = t;
    upd_cnt (t);
    upd_sum (t);
}
void reverse (pitem t, int l, int r) {
    pitem t1, t2, t3;
    split (t, t1, t2, l-1);
    split (t2, t2, t3, r-l+1);
    t2->rev ^= true;
    merge (t, t1, t2);
    merge (t, t, t3);
}
void output (pitem t) {
    if (!t)  return;
    push (t);
    output (t->l);
    cout<<t->value;
    output (t->r);
}
