ll seg[N];
ll arr[N];
ll lazy[N];
void Build_seg(ll node,ll l, ll r) {
    ll mid = (l + r) / 2;
  lazy[node] = 0;    // vip dont have to make it 0  because 0 could be val ; spicial in assign all [l,r] to v;
    if (l == r) {
        seg[node] = arr[l];
        return;
    }
    Build_seg(node * 2, l, mid);
    Build_seg(node * 2 + 1, mid + 1, r);
    seg[node] = seg[node * 2] + seg[node * 2 + 1];
}

void propagate(ll node,ll l,ll r) {
    if (lazy[node] == 0) {
        return;
    }
    seg[node] += lazy[node] * (r - l + 1);
    if (l != r) {
        lazy[node *2] += lazy[node];
        lazy[node *2+1] += lazy[node];
    }
    lazy[node] = 0;
}
void update(ll node, ll l , ll r, ll st,ll en,ll val) {
    ll mid = (l + r) / 2;
    propagate(node, l, r);
    if (l > en || r < st) {
        return;
    }
    if (l >= st && r <= en) {
        lazy[node] = val;
        propagate(node, l, r);
        return;
    }
    update(node * 2, l, mid, st, en, val);
    update(node * 2 + 1, mid + 1, r, st, en, val);
    seg[node] = seg[node * 2] + seg[node * 2 + 1];
}
ll query(ll node, ll l , ll r, ll st,ll en) {            // query for ftra if you want idx make it or use st=en
    propagate(node, l, r);					
    if (l > en || r < st)				// vip  if you used seg[node*2] should use propgatio imp step 3;
        return 0;
    if (l >= st && r <= en)
        return seg[node];
    ll mid = l + r >> 1;
    return query(node *2, l, mid, st, en) + query(node *2+1, mid + 1, r, st, en);
}
