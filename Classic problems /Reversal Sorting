////// sort by reverse in at most n operation 
//////https://cses.fi/problemset/task/2075/ 
////// use random treap with lazy propagation and get minmum index to reverse again 
///// to reduce time  use randmoize func  twice prior(rand()*rand())
///// 3gamista++
const int N=2e5+10;
typedef struct item * pitem;
struct item {
    int prior, cnt;
    bool rev;
    ll value;
    ll mn;
    pitem l, r;
    item (ll value) : value(value), prior(rand()), l(NULL), r(NULL),mn(value) { }
};
int cnt (pitem t) {
    return t ? t->cnt : 0;
}
void upd_cnt (pitem t) {
    if (t)
        t->cnt = 1 + cnt(t->l) + cnt (t->r);
}
void upd_min (pitem t) {
    if (t) {
        ll lef = (t->l) ? t->l->mn : oo;
        ll rig = (t->r) ? t->r->mn : oo;
        t->mn = min3(t->value, lef, rig);
    }
}
void push (pitem it) { 		// we use it as lazy propagation
    if (it && it->rev) {
        it->rev = false;
        swap (it->l, it->r);
        if (it->l)  it->l->rev ^= true;
        if (it->r)  it->r->rev ^= true;
    }
}
void merge (pitem & t, pitem l, pitem r) {
    push (l);
    push (r);
    if (!l || !r)
        t = l ? l : r;
    else if (l->prior > r->prior)
        merge (l->r, l->r, r),  t = l;
    else
        merge (r->l, l, r->l),  t = r;
    upd_cnt (t);
    upd_min (t);
}
void split (pitem t, pitem & l, pitem & r, int key, int add = 0) {
    if (!t)
        return void( l = r = 0 );
    push (t);
    int cur_key = add + cnt(t->l);
    if (key <= cur_key)
        split (t->l, l, t->l, key, add),  r = t;
    else
        split (t->r, t->r, r, key, add + 1 + cnt(t->l)),  l = t;
    upd_cnt (t);
    upd_min (t);
}
void reverse (pitem &t, int l, int r) {
    pitem t1, t2, t3;
    split (t, t1, t2, l-1);
    split (t2, t2, t3, r-l+1);
    if(t2)
    t2->rev ^= true;
    merge (t, t1, t2);
    merge (t, t, t3);
}
int find_minimum(pitem t) {
    if(!t)return 1;
    push(t);
    if (t->l && t->l->mn == t->mn)
        return find_minimum(t->l);
    if (t->r && t->r->mn == t->mn)
        return cnt(t->l) + 1 + find_minimum(t->r);
    return cnt(t->l);
}
void output (pitem t) {
    if (!t)  return;
    push (t);
    output (t->l);
    cout<<t->value;
    output (t->r);
}
void solve() {
    ll n;
    cin >> n;
    vi x(n);
    vip p;
    for (int i = 0; i < n; ++i) {
        cin >> x[i];
    }
    pitem root = new item(x[0]);
    for (int i = 1; i < x.size(); ++i) {
        merge(root, root, new item(x[i]));
    }
    for (int nw = 1; nw <n ; ++nw) {
        ll en = find_minimum(root)+nw;
        if(nw!=en) {
            reverse(root, 1, en-nw+1);
            p.push_back({nw, en});
        }
        pitem t1;
        split(root,t1,root,1);
    }
    cout<<p.size()<<endl;
    for (int i = 0; i < p.size(); ++i) {
        cout<<p[i].first<<" "<<p[i].second<<endl;
    }
}
