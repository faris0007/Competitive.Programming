
vector<ll> clas;
void radix_sort(vector<pair<pair<int,int>,int>>&a){
     ll n=a.size();
    {
        vector<int>cnt(n);
        for(auto item:a){
            cnt[item.first.second]++;
        }
        vector<pair<pair<int,int>,int>>a_new(n);
        vector<int>pos(n);
        pos[0]=0;
        for (int i = 1; i < n; ++i) {
            pos[i]=pos[i-1]+cnt[i-1];
        }
        for(auto x:a){
            int i=x.first.second;
            a_new[pos[i]]=x;
            pos[i]++;
        }
        a=a_new;
    }
    {
        vector<int>cnt(n);
        for(auto item:a){
            cnt[item.first.first]++;
        }
        vector<pair<pair<int,int>,int>>a_new(n);
        vector<int>pos(n);
        pos[0]=0;
        for (int i = 1; i < n; ++i) {
            pos[i]=pos[i-1]+cnt[i-1];
        }
        for(auto x:a){
            int i=x.first.first;
            a_new[pos[i]]=x;
            pos[i]++;
        }
        a=a_new;
    }
}
vector<ll> suffarray(string &x) {
    x += "$";
    ll n = x.size();
    vector<pair<char, ll>> a(n);
    vector<ll> st(n);
    vector<ll> clas(n);
    for (int i = 0; i < n; ++i) { a[i] = {x[i], i}; }
    sort(all(a));
    for (int i = 0; i < n; ++i) { st[i] = a[i].second; }
    clas[st[0]] = 0;
    for (int i = 1; i < n; ++i) {
        clas[st[i]] = clas[st[i - 1]];
        if (a[i].first != a[i-1].first)clas[st[i]]++;
    }
    ll k = 0;
    while ((1 << k) < n) {
        vector<pair<pi, ll>> b(n);
        for (int i = 0; i < n; ++i) {
            b[i] = {{clas[i], clas[(i + (1 << k)) % n]}, i};
        }
        radix_sort(b);
        for (int i = 0; i < n; ++i) { st[i] = b[i].second; }
        clas[st[0]] = 0;
        for (int i = 1; i < n; ++i) {
            clas[st[i]] = clas[st[i - 1]];
            if (b[i].first != b[i - 1].first)clas[st[i]]++;
        }
        k++;
    }
    return st;
}
vi get_lcp(string &x,vi &st) {
    ll k = 0, n = x.size();
    vi lcp(n);
    vector<ll> clas(n);
    for(int i=0 ; i <n ;i++) clas[st[i]] = i;
    for (int i = 0; i < n - 1; ++i) {
        ll pi = clas[i]; //// due to in  clas we start class from 0 ;
        ll lst = st[pi - 1];
        while (x[i + k] == x[lst + k])k++;
        lcp[pi] = k;
        k = max(0ll, k - 1);
    }
    return lcp;
}
 
void solve() {
    string x;
    cin >> x;
    ll n = x.size();
    vi suf = suffarray(x);
    vi lcp = get_lcp(x, suf);
}
